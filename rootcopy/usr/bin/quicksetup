#!/bin/bash
typeset -A flatpaks
flatpaks=(
	[basic]="Choose Gnome Applications"
	[internet]="Choose Internet Applications"
	[games]="Choose Your Games"
)
	
typeset -A basic
basic=(
	[org.gnome.Calculator]="Calculator"
	[org.gnome.Loupe]="Photos"
	[org.gnome.TextEditor]="Text Editor"
	[org.gnome.Totem]="Video Player"
)

typeset -A internet
internet=(
	[org.mozilla.firefox]="Firefox"
	[com.google.Chrome]="Google Chrome"
	[org.filezillaproject.Filezilla]="FileZilla"
)

typeset -A games
games=(
	[com.valvesoftware.Steam]="Steam"
	[com.mojang.Minecraft]="Minecraft"
	[org.vinegarhq.Vinegar]="Roblox"
	[org.prismlauncher.PrismLauncher]="Prism Launcher"
	[net.minetest.Minetest]="Luanti"
	[dev.tchx84.Gameeky]="Gameeky"
)



typeset -A tweaks
tweaks=(
	[stretch-wallpaper]="Stretch Wallpaper to all Monitors"
	[select-copy]="Enable Copy on Select"
)


typeset -A rebaseVersions
rebaseVersions=(
	[workstation]="Workstation Edition"
	[workstation-nvidia]="Workstation NVidia Edition"
	[developer]="Developer Edition"
	[expirimental]="Expirimental Edition"
)
typeset -g rebaseID


function tweak-stretch-wallpaper() {
	gsettings set org.gnome.desktop/background picture-options spanned
}
function untweak-stretch-wallpaper() {
	gsettings reset org.gnome.desktop/background picture-options
}


function tweak-select-copy() {
	echo "
[Settings]
gtk-enable-primary-paste=true" >> $HOME/.config/gtk-3.0/settings.ini
}
function untweak-select-copy() {
	rm $HOME/.config/gtk-3.0/settings.ini
}



if [[ -f /etc/quicksetup/config ]]; then
	source /etc/quicksetup/config
fi


# /etc/ not updated on a rebase
if [[ -f /usr/lib/quicksetup/config ]]; then
	source /usr/lib/quicksetup/config
fi


# Used internally
typeset -A flatpakInstall
typeset -A flatpakUninstall
typeset -A flatpakList
typeset -A tweakInstall
typeset -A tweakUninstall

typeset -g gtkWindow
if [[ -x /usr/lib/quicksetup/quicksetupWindow ]]; then
	gtkWindow=/usr/lib/quicksetup/quicksetupWindow

elif [[ -x `which zenity` ]];then
	gtkWindow=`which zenity`

else
	echo Zenity is not installed, exiting...
	exit 1
fi


# Create Cache dir
CACHE="${XDG_CACHE_DIR:-$HOME/.cache}/quicksetup"
mkdir -p $CACHE

# Create Config dir
CONFIG=$HOME/.config/quicksetup
mkdir -p $CONFIG


trap cleanup 1 2 3 6


function usage() {
	echo "$0 [option] [option]"
	echo "  flatpak     Install flatpaks"
	echo "  tweaks      Install tweaks"
	echo "  rebase      Rebase to other version"
}


function error() {
	echo -e "\e[31m$@\e[0m"
}


function success() {
	echo -e "\e[32m$@\e[0m"
}



function main() {
	if [[ $# -gt 0 ]]; then
		if [[ " ${1} " = " flatpak " ]]; then
			if [[ $# -eq 2 ]]; then
				if [[ " ${2} " = " all " ]]; then
					flatpakSetup all
				elif [[ " ${!flatpaks[@]} " =~ " ${2} " ]]; then
					flatpakSetup ${2}
				else
					error "${2} not found, try one of the following"
					echo "  all        Show all flatpak options"
					
					for pak in "${!flatpaks[@]}"; do
						echo "  $pak     ${flatpaks[$pak]}"
					done
				fi
			else
				flatpakSetup all
			fi
		elif [[ " ${1} " = " tweaks " ]]; then
			tweakSetup
		elif [[ " ${1} " = " rebase " ]]; then
			rebaseSetup
		elif [[ " ${1} " = " firstrun " ]]; then
			firstrunSetup
		else
			error "Invalid option"
			usage
			exit 1
		fi
	else
		main flatpak all
		main tweaks
	fi

}


function cleanup() {
	rm -r $CACHE
}


function flatpakSetup() {
	# Enable flathub - systemd seems to be hanging on this
	if ! flatpak remotes | grep user | grep flathub >/dev/null; then
		flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
		flatpak remote-modify --user --no-filter --enable flathub
	fi

	if [[ $# -eq 1 ]]; then
		if [[ " ${1} " = " all " ]]; then
			for id in "${!flatpaks[@]}"; do
				flatpakWindow ${id}
			done
		else
			flatpakWindow ${1}
		fi
	else
		error "Internal error"
		exit 5
	fi


	# Create $flatpakList
	for base in "${!flatpaks[@]}"; do
		local -n list=${base}

		for flatpak in "${!list[@]}"; do
			flatpakList[$flatpak]=${list[$flatpak]}
		done
	done


	# Install selected flatpaks
	for flatpak in "${!flatpakInstall[@]}"; do
		flatpakInstall $flatpak
	done


	# remove selected flatpaks
	for flatpak in "${!flatpakUninstall[@]}"; do
		flatpakUninstall $flatpak
	done
}


function flatpakWindow() {
	local list=""
	local output=""
	local title=${flatpaks[$1]}
	local base=$1
	local check=""
	local -n apps=${1}
	local -A installed
	local -A checked
	
	# Loop apps
	for app in "${!apps[@]}"; do
		check="FALSE"
		
		# Set check and add to $installed variable
		if flatpak info $app >/dev/null 2>&1 ; then
			check="TRUE"
			installed+=($app)
		fi
		
		list="${list} ${check} \"${apps[$app]}\" ${app}"
	done
	
	
	# Paste command into file, to get get quotes working
	echo -e "
	output=\$($gtkWindow --list --checklist \
		--title \"Quick Setup\" --text \"${title}\" \
		--column=\"Use\" --column=\"Application\" --column=\"app\" \
		--hide-column=3 --print-column=3 --height=500 \
		--ok-label=\"Accept\" --cancel-label=\"Skip\" ${list} 2>/dev/null)
	return=\$?
	echo \$output
	exit \$return
	" > $CACHE/flatpak.${base}
	
	# Show GUI
	if output=$(bash $CACHE/flatpak.$base); then
		IFS='|' read -a choice <<< "$output"

		# Generate $checked array
		for app in ${choice[*]}; do
			checked+=($app)
		done
			
		# Get apps to remove
		for app in "${!installed[@]}"; do
			[[ ! " ${!checked[@]} " =~ " ${app} " ]] && flatpakUninstall+=($app)
		done
		
		# Get apps to Install
		for app in "${!checked[@]}"; do
			[[ ! " ${!installed[@]} " =~ " ${app} " ]] && flatpakInstall+=($app)
		done
	fi
}



function flatpakInstall() {
	local flatpak=${1}
	local title=${flatpakList[$flatpak]}
	flatpak install --user $flatpak -y | $gtkWindow --progress --title="Installing $title" \
		--text="Please wait..." --auto-close --no-cancel --pulsate 2>/dev/null
}



function flatpakUninstall() {
	local flatpak=${1}
	local title=${flatpakList[$flatpak]}
	flatpak uninstall --user $flatpak -y | $gtkWindow --progress --title="Removing $title" \
		--text="Please wait..." --auto-close --no-cancel --pulsate 2>/dev/null
}


function tweakSetup() {
	tweakWindow

	local -i count=0

	( for tweak in "${!tweakInstall[@]}"; do
		((count++))

		# Run tweak function
		tweak-$tweak
		touch "$CONFIG/$tweak.tweak"

		if [[ $count -eq ${#tweakInstall[@]} ]]; then
			echo 100
		else
			echo $(( $count*${#tweaks[@]}/100 ))
		fi
	done ) |
	$gtkWindow --progress --title="Installing tweaks" \
		--text="Installing ${#tweakInstall[@]} tweaks" \
		--percentage=0 --auto-close 2>/dev/null

	( for tweak in "${!tweakUninstall[@]}"; do
		((count++))

		# Run tweak function
		untweak-$tweak
		rm "$CONFIG/$tweak.tweak"

		if [[ $count -eq ${#tweakUninstall[@]} ]]; then
			echo 100
		else
			echo $(( $count*${#tweaks[@]}/100 ))
		fi
	done ) |
	$gtkWindow --progress --title="Installing tweaks" \
		--text="Uninstalling ${#tweakUninstall[@]} tweaks" \
		--percentage=0 --auto-close 2>/dev/null
}


function tweakWindow() {
	local list=""
	local output=""
	local title="Selecteer Tweaks om te Installeren"
	local check=""
	local -A installed=()
	local -A checked=()
	
	# Loop tweaks
	for tweak in "${!tweaks[@]}"; do
		check="FALSE"
		
		# Set check and add to $installed variable
		if [[ -f "$CONFIG/$tweak.tweak" ]]; then
			check="TRUE"
			installed+=($tweak)
		fi
		list="${list} $check \"${tweaks[$tweak]}\" ${tweak}"
	done
	
	
	# Paste command into file, to get get quotes working
	echo -e "
	output=\$($gtkWindow --list --checklist \
		--title \"Quick Setup\" --text \"${title}\" \
		--column=\"Use\" --column=\"Application\" --column=\"app\" \
		--hide-column=3 --print-column=3 --height=500 \
		--ok-label=\"Accept\" --cancel-label=\"Skip\" ${list} 2>/dev/null)
	return=\$?
	echo \$output
	exit \$return
	" > /$CACHE/tweaks
	
	# Show GUI
	if output=$(bash $CACHE/tweaks); then
		IFS='|' read -a choice <<< "$output"

		for tweak in ${choice[*]}; do
			checked+=($tweak)
		done
			
		# Get tweaks to remove
		for tweak in "${!installed[@]}"; do
			[[ ! " ${!checked[@]} " =~ " ${tweak} " ]] && tweakUninstall+=($tweak)
		done
		
		# Get tweaks to Install
		for tweak in "${!checked[@]}"; do
			[[ ! " ${!installed[@]} " =~ " ${tweak} " ]] && tweakInstall+=($tweak)
		done
	fi
}


function rebaseSetup() {
	rebaseWindow

	#rpm-ostree rebase ostree-unverified-registry:ghcr.io/bluefora/$rebaseID:latest --reboot

}


function rebaseWindow() {
	organization=`rpm-ostree status | grep ● | rev | cut -d / -f 2 | rev`
	name=`rpm-ostree status | grep ● | rev | cut -d / -f 1 | rev | cut -d : -f 1`
	#rpm-ostree status | grep ● | grep unverified && signed=false || signed=true

	if [[ "$organization" = "bluefora" ]]; then
		# Loop apps
		for version in "${!rebaseVersions[@]}"; do
			check="FALSE"
			
			# Set check and add to $installed variable
			if [[ " ${organization} " = " bluefora " && " $name " = " $version " ]]; then
				check="TRUE"
			fi
			list="${list} $check \"${rebaseVersions[$version]}\" ${version}"
		done
	else
		# Loop apps
		for version in "${!rebaseVersions[@]}"; do
			list="${list} FALSE \"${rebaseVersions[$version]}\" ${version}"
		done
	fi

	# Paste command into file, to get get quotes working
	echo -e "
	output=\$($gtkWindow --list --radiolist \
		--title \"Quick Setup\" --text \"Rebase to other version\" \
		--column=\"Current\" --column=\"Version\" --column=\"id\" \
		--hide-column=3 --print-column=3 --height=500 \
		--ok-label=\"Accept\" --cancel-label=\"Skip\" ${list} 2>/dev/null)
	return=\$?
	echo \$output
	exit \$return
	" > /$CACHE/rebase
	
	# Show GUI
	if output=$(bash $CACHE/rebase); then
		# TODO: the rest....
		echo $output

		if [[ " ${rebaseID} " = " $output " ]]; then
			echo "You are already on $output"
		else
			echo "Rebasing to $output"
			echo "Do you want to reboot?"
		fi
	fi

}


function firstrunSetup() {
	$gtkWindow --question --title="Quick Setup" --text="Do you want to install applications?"
	if [[ $? ]]; then
		$0 flatpak
		$0 tweaks
	fi

	touch $HOME/.config/quicksetup/firstrun.disable
}


main $@
